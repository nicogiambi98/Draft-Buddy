#:import dp kivy.metrics.dp
#:import SlideTransition kivy.uix.screenmanager.SlideTransition

# Root container with fixed BottomNav and Toast overlay
<Root@FloatLayout>:
    # Main vertical stack
    BoxLayout:
        id: main_stack
        orientation: 'vertical'
        size_hint: 1, 1
        ScreenManager:
            id: sm
            transition: SlideTransition(duration=0.18)
        BottomNav:
            id: bottomnav
    # Toast overlay layer (covers entire root without affecting layout)
    FloatLayout:
        id: toast_layer
        size_hint: 1, 1
        pos: 0, 0

# Typography tokens
<TitleLabel@Label>:
    font_size: '20sp'
    bold: True
<HeaderLabel@Label>:
    font_size: '16sp'
    bold: True
<BodyLabel@Label>:
    font_size: '14sp'
<CaptionLabel@Label>:
    font_size: '12sp'
    color: 0.6, 0.6, 0.6, 1

# Button styles
<PrimaryButton@Button>:
    size_hint_y: None
    height: dp(48)
    padding: [dp(12), dp(10)]
    background_normal: ''
    background_down: ''
    background_color: 0, 0, 0, 0  # use canvas
    color: (app.theme['on_primary'] if not self.disabled else (1,1,1,0.7)) if hasattr(app, 'theme') else (1,1,1,1)
    canvas.before:
        Color:
            rgba: (0.7,0.7,0.7,1) if self.disabled else ((app.theme['primary'][0], app.theme['primary'][1], app.theme['primary'][2], 0.8) if self.state=='down' else app.theme['primary']) if hasattr(app, 'theme') else ((0.16, 0.47, 0.96, 0.8) if self.state=='down' else (0.16, 0.47, 0.96, 1))
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: [dp(10),]
    canvas.after:
        Color:
            rgba: (app.theme['on_primary'][0], app.theme['on_primary'][1], app.theme['on_primary'][2], 0.35) if hasattr(app, 'theme') else (1,1,1,0.35)
        Line:
            rounded_rectangle: (self.x, self.y, self.width, self.height, dp(10))
            width: 1.2
<SecondaryButton@Button>:
    size_hint_y: None
    height: dp(48)
    padding: [dp(12), dp(10)]
    background_normal: ''
    background_down: ''
    background_color: 0, 0, 0, 0
    color: (app.theme['on_surface'] if not self.disabled else (0,0,0,0.6)) if hasattr(app, 'theme') else (0.1,0.1,0.1,1)
    canvas.before:
        Color:
            rgba: ((0.85,0.85,0.85,1) if self.disabled else ((0.92,0.92,0.92,1) if self.state=='normal' else (0.86,0.86,0.86,1))) if not hasattr(app, 'theme') else (((0.85,0.85,0.85,1) if self.disabled else ((app.theme['surface'][0], app.theme['surface'][1], app.theme['surface'][2], 1) if self.state=='normal' else (app.theme['surface'][0]-0.06, app.theme['surface'][1]-0.06, app.theme['surface'][2]-0.06, 1))))
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: [dp(10),]
    canvas.after:
        Color:
            rgba: (app.theme['on_surface'][0], app.theme['on_surface'][1], app.theme['on_surface'][2], 0.35) if hasattr(app, 'theme') else (0,0,0,0.35)
        Line:
            rounded_rectangle: (self.x, self.y, self.width, self.height, dp(10))
            width: 1.2

# Bottom navigation reusable widget
<BottomNav>:
    size_hint_y: None
    height: dp(56)
    canvas.before:
        Color:
            rgba: (app.theme['on_surface'][0], app.theme['on_surface'][1], app.theme['on_surface'][2], 0.28) if hasattr(app, 'theme') else (0,0,0,0.28)
        Rectangle:
            pos: self.x, self.top - dp(1)
            size: self.width, dp(1)
    ScrollView:
        id: nav_scroll
        size_hint_y: None
        height: dp(56)
        do_scroll_x: False
        do_scroll_y: False
        bar_width: 0
        effect_y: None
        BoxLayout:
            id: nav_row
            size_hint_x: None
            width: self.minimum_width
            height: dp(56)
            orientation: 'horizontal'
            spacing: 0
            # helper lambda-like via ternary expressions
            # Group 1 (for circular effect)
            Button:
                text: "Players"
                size_hint_x: None
                width: dp(120)
                background_normal: ''
                color: 1,1,1,1
                background_color: (app.theme['primary'] if (hasattr(app,'root') and app.root and app.root.ids and 'sm' in app.root.ids and app.root.ids.sm.current=='players') else (0.23,0.23,0.25,1)) if hasattr(app,'theme') else ((0.16,0.47,0.96,1) if (hasattr(app,'root') and app.root and app.root.ids and 'sm' in app.root.ids and app.root.ids.sm.current=='players') else (0.23,0.23,0.25,1))
                on_release: app.switch_tab('players')
            Button:
                text: "Events"
                size_hint_x: None
                width: dp(120)
                background_normal: ''
                color: 1,1,1,1
                background_color: (app.theme['primary'] if (hasattr(app,'root') and app.root and app.root.ids and 'sm' in app.root.ids and app.root.ids.sm.current=='eventslist') else (0.23,0.23,0.25,1)) if hasattr(app,'theme') else ((0.16,0.47,0.96,1) if (hasattr(app,'root') and app.root and app.root.ids and 'sm' in app.root.ids and app.root.ids.sm.current=='eventslist') else (0.23,0.23,0.25,1))
                on_release: app.switch_tab('eventslist')
            Button:
                text: "League Tracker"
                size_hint_x: None
                width: dp(140)
                background_normal: ''
                color: 1,1,1,1
                background_color: (app.theme['primary'] if (hasattr(app,'root') and app.root and app.root.ids and 'sm' in app.root.ids and app.root.ids.sm.current=='league') else (0.23,0.23,0.25,1)) if hasattr(app,'theme') else ((0.16,0.47,0.96,1) if (hasattr(app,'root') and app.root and app.root.ids and 'sm' in app.root.ids and app.root.ids.sm.current=='league') else (0.23,0.23,0.25,1))
                on_release: app.switch_tab('league')
            Button:
                text: "Bingo"
                size_hint_x: None
                width: dp(120)
                background_normal: ''
                color: 1,1,1,1
                background_color: (app.theme['primary'] if (hasattr(app,'root') and app.root and app.root.ids and 'sm' in app.root.ids and app.root.ids.sm.current=='bingo') else (0.23,0.23,0.25,1)) if hasattr(app,'theme') else ((0.16,0.47,0.96,1) if (hasattr(app,'root') and app.root and app.root.ids and 'sm' in app.root.ids and app.root.ids.sm.current=='bingo') else (0.23,0.23,0.25,1))
                on_release: app.switch_tab('bingo')
            Button:
                text: "Draft Timer"
                size_hint_x: None
                width: dp(140)
                background_normal: ''
                color: 1,1,1,1
                background_color: (app.theme['primary'] if (hasattr(app,'root') and app.root and app.root.ids and 'sm' in app.root.ids and app.root.ids.sm.current=='drafttimer') else (0.23,0.23,0.25,1)) if hasattr(app,'theme') else ((0.16,0.47,0.96,1) if (hasattr(app,'root') and app.root and app.root.ids and 'sm' in app.root.ids and app.root.ids.sm.current=='drafttimer') else (0.23,0.23,0.25,1))
                on_release: app.switch_tab('drafttimer')
            Button:
                text: "Life Tracker"
                size_hint_x: None
                width: dp(140)
                background_normal: ''
                color: 1,1,1,1
                background_color: (app.theme['primary'] if (hasattr(app,'root') and app.root and app.root.ids and 'sm' in app.root.ids and app.root.ids.sm.current=='lifetracker') else (0.23,0.23,0.25,1)) if hasattr(app,'theme') else ((0.16,0.47,0.96,1) if (hasattr(app,'root') and app.root and app.root.ids and 'sm' in app.root.ids and app.root.ids.sm.current=='lifetracker') else (0.23,0.23,0.25,1))
                on_release: app.switch_tab('lifetracker')
            # Group 2 (middle group for centering)
            Button:
                text: "Players"
                size_hint_x: None
                width: dp(120)
                background_normal: ''
                color: 1,1,1,1
                background_color: (app.theme['primary'] if (hasattr(app,'root') and app.root and app.root.ids and 'sm' in app.root.ids and app.root.ids.sm.current=='players') else (0.23,0.23,0.25,1)) if hasattr(app,'theme') else ((0.16,0.47,0.96,1) if (hasattr(app,'root') and app.root and app.root.ids and 'sm' in app.root.ids and app.root.ids.sm.current=='players') else (0.23,0.23,0.25,1))
                on_release: app.switch_tab('players')
            Button:
                text: "Events"
                size_hint_x: None
                width: dp(120)
                background_normal: ''
                color: 1,1,1,1
                background_color: (app.theme['primary'] if (hasattr(app,'root') and app.root and app.root.ids and 'sm' in app.root.ids and app.root.ids.sm.current=='eventslist') else (0.23,0.23,0.25,1)) if hasattr(app,'theme') else ((0.16,0.47,0.96,1) if (hasattr(app,'root') and app.root and app.root.ids and 'sm' in app.root.ids and app.root.ids.sm.current=='eventslist') else (0.23,0.23,0.25,1))
                on_release: app.switch_tab('eventslist')
            Button:
                text: "League Tracker"
                size_hint_x: None
                width: dp(140)
                background_normal: ''
                color: 1,1,1,1
                background_color: (app.theme['primary'] if (hasattr(app,'root') and app.root and app.root.ids and 'sm' in app.root.ids and app.root.ids.sm.current=='league') else (0.23,0.23,0.25,1)) if hasattr(app,'theme') else ((0.16,0.47,0.96,1) if (hasattr(app,'root') and app.root and app.root.ids and 'sm' in app.root.ids and app.root.ids.sm.current=='league') else (0.23,0.23,0.25,1))
                on_release: app.switch_tab('league')
            Button:
                text: "Bingo"
                size_hint_x: None
                width: dp(120)
                background_normal: ''
                color: 1,1,1,1
                background_color: (app.theme['primary'] if (hasattr(app,'root') and app.root and app.root.ids and 'sm' in app.root.ids and app.root.ids.sm.current=='bingo') else (0.23,0.23,0.25,1)) if hasattr(app,'theme') else ((0.16,0.47,0.96,1) if (hasattr(app,'root') and app.root and app.root.ids and 'sm' in app.root.ids and app.root.ids.sm.current=='bingo') else (0.23,0.23,0.25,1))
                on_release: app.switch_tab('bingo')
            Button:
                text: "Draft Timer"
                size_hint_x: None
                width: dp(140)
                background_normal: ''
                color: 1,1,1,1
                background_color: (app.theme['primary'] if (hasattr(app,'root') and app.root and app.root.ids and 'sm' in app.root.ids and app.root.ids.sm.current=='drafttimer') else (0.23,0.23,0.25,1)) if hasattr(app,'theme') else ((0.16,0.47,0.96,1) if (hasattr(app,'root') and app.root and app.root.ids and 'sm' in app.root.ids and app.root.ids.sm.current=='drafttimer') else (0.23,0.23,0.25,1))
                on_release: app.switch_tab('drafttimer')
            Button:
                text: "Life Tracker"
                size_hint_x: None
                width: dp(140)
                background_normal: ''
                color: 1,1,1,1
                background_color: (app.theme['primary'] if (hasattr(app,'root') and app.root and app.root.ids and 'sm' in app.root.ids and app.root.ids.sm.current=='lifetracker') else (0.23,0.23,0.25,1)) if hasattr(app,'theme') else ((0.16,0.47,0.96,1) if (hasattr(app,'root') and app.root and app.root.ids and 'sm' in app.root.ids and app.root.ids.sm.current=='lifetracker') else (0.23,0.23,0.25,1))
                on_release: app.switch_tab('lifetracker')
            # Group 3 (for circular effect)
            Button:
                text: "Players"
                size_hint_x: None
                width: dp(120)
                background_normal: ''
                color: 1,1,1,1
                background_color: (app.theme['primary'] if (hasattr(app,'root') and app.root and app.root.ids and 'sm' in app.root.ids and app.root.ids.sm.current=='players') else (0.23,0.23,0.25,1)) if hasattr(app,'theme') else ((0.16,0.47,0.96,1) if (hasattr(app,'root') and app.root and app.root.ids and 'sm' in app.root.ids and app.root.ids.sm.current=='players') else (0.23,0.23,0.25,1))
                on_release: app.switch_tab('players')
            Button:
                text: "Events"
                size_hint_x: None
                width: dp(120)
                background_normal: ''
                color: 1,1,1,1
                background_color: (app.theme['primary'] if (hasattr(app,'root') and app.root and app.root.ids and 'sm' in app.root.ids and app.root.ids.sm.current=='eventslist') else (0.23,0.23,0.25,1)) if hasattr(app,'theme') else ((0.16,0.47,0.96,1) if (hasattr(app,'root') and app.root and app.root.ids and 'sm' in app.root.ids and app.root.ids.sm.current=='eventslist') else (0.23,0.23,0.25,1))
                on_release: app.switch_tab('eventslist')
            Button:
                text: "League Tracker"
                size_hint_x: None
                width: dp(140)
                background_normal: ''
                color: 1,1,1,1
                background_color: (app.theme['primary'] if (hasattr(app,'root') and app.root and app.root.ids and 'sm' in app.root.ids and app.root.ids.sm.current=='league') else (0.23,0.23,0.25,1)) if hasattr(app,'theme') else ((0.16,0.47,0.96,1) if (hasattr(app,'root') and app.root and app.root.ids and 'sm' in app.root.ids and app.root.ids.sm.current=='league') else (0.23,0.23,0.25,1))
                on_release: app.switch_tab('league')
            Button:
                text: "Bingo"
                size_hint_x: None
                width: dp(120)
                background_normal: ''
                color: 1,1,1,1
                background_color: (app.theme['primary'] if (hasattr(app,'root') and app.root and app.root.ids and 'sm' in app.root.ids and app.root.ids.sm.current=='bingo') else (0.23,0.23,0.25,1)) if hasattr(app,'theme') else ((0.16,0.47,0.96,1) if (hasattr(app,'root') and app.root and app.root.ids and 'sm' in app.root.ids and app.root.ids.sm.current=='bingo') else (0.23,0.23,0.25,1))
                on_release: app.switch_tab('bingo')
            Button:
                text: "Draft Timer"
                size_hint_x: None
                width: dp(140)
                background_normal: ''
                color: 1,1,1,1
                background_color: (app.theme['primary'] if (hasattr(app,'root') and app.root and app.root.ids and 'sm' in app.root.ids and app.root.ids.sm.current=='drafttimer') else (0.23,0.23,0.25,1)) if hasattr(app,'theme') else ((0.16,0.47,0.96,1) if (hasattr(app,'root') and app.root and app.root.ids and 'sm' in app.root.ids and app.root.ids.sm.current=='drafttimer') else (0.23,0.23,0.25,1))
                on_release: app.switch_tab('drafttimer')
            Button:
                text: "Life Tracker"
                size_hint_x: None
                width: dp(140)
                background_normal: ''
                color: 1,1,1,1
                background_color: (app.theme['primary'] if (hasattr(app,'root') and app.root and app.root.ids and 'sm' in app.root.ids and app.root.ids.sm.current=='lifetracker') else (0.23,0.23,0.25,1)) if hasattr(app,'theme') else ((0.16,0.47,0.96,1) if (hasattr(app,'root') and app.root and app.root.ids and 'sm' in app.root.ids and app.root.ids.sm.current=='lifetracker') else (0.23,0.23,0.25,1))
                on_release: app.switch_tab('lifetracker')

# Global button text alignment
<Button>:
    # Make all button texts centered and consistent
    text_size: self.size
    halign: 'center'
    valign: 'middle'
    padding: [dp(4), dp(4)]
    canvas.after:
        Color:
            rgba: (app.theme['on_surface'][0], app.theme['on_surface'][1], app.theme['on_surface'][2], 0.28) if hasattr(app, 'theme') else (0,0,0,0.28)
        Line:
            rectangle: (self.x, self.y, self.width, self.height)
            width: 1.0

<PlayersScreen>:
    BoxLayout:
        orientation: "vertical"
        padding: dp(10)
        spacing: dp(8)
        BoxLayout:
            size_hint_y: None
            height: dp(40)
            TitleLabel:
                text: "Players"
            PrimaryButton:
                text: "New Player"
                size_hint_x: None
                width: dp(140)
                height: dp(40)
                on_release: root.open_add_player()

        BoxLayout:
            size_hint_y: None
            height: dp(36)
            TextInput:
                id: filter_input
                hint_text: "Filter..."
                multiline: False
                on_text: self.text = self.text.lstrip(); root.filter_players(self.text)

        ScrollView:
            GridLayout:
                id: players_list
                cols: 1
                size_hint_y: None
                height: self.minimum_height
                spacing: dp(6)
                row_default_height: dp(56)

<NewPlayerScreen>:
    BoxLayout:
        orientation: "vertical"
        padding: dp(10)
        spacing: dp(8)
        TitleLabel:
            text: "Add New Player"
        TextInput:
            id: name_input
            hint_text: "Player name"
            multiline: False
            on_text: self.text = self.text.lstrip()
            on_text_validate: root.save_player(self.text)
        BoxLayout:
            size_hint_y: None
            height: dp(48)
            PrimaryButton:
                text: "Save"
                on_release:
                    root.save_player(name_input.text)
            SecondaryButton:
                text: "Back"
                on_release: root.manager.current = "players"

<CreateEventDetailsScreen>:
    BoxLayout:
        orientation: "vertical"
        padding: dp(12)
        spacing: dp(10)
        TitleLabel:
            text: "Create Event"
            size_hint_y: None
            height: dp(40)
        AnchorLayout:
            anchor_x: 'center'
            anchor_y: 'top'
            size_hint_y: 1
            BoxLayout:
                orientation: 'vertical'
                size_hint_x: 0.96
                size_hint_y: None
                height: self.minimum_height
                spacing: dp(12)
                canvas.before:
                    Color:
                        rgba: 1,1,1,1
                    Line:
                        rectangle: (self.x, self.y, self.width, self.height)
                        width: 1.2
                GridLayout:
                    cols: 2
                    col_default_width: dp(140)
                    col_force_default: False
                    size_hint_y: None
                    height: self.minimum_height
                    row_default_height: dp(48)
                    row_force_default: True
                    spacing: dp(8)
                    padding: [dp(8), dp(8)]
                    HeaderLabel:
                        text: "Event name"
                        size_hint_x: None
                        width: dp(140)
                    TextInput:
                        id: event_name
                        hint_text: "Event name"
                        multiline: False
                        on_text: self.text = self.text.lstrip()
                        on_text_validate: rounds_input.focus = True
                    HeaderLabel:
                        text: "Type"
                        size_hint_x: None
                        width: dp(140)
                    Spinner:
                        id: event_type
                        text: "draft"
                        values: ["draft", "sealed", "cube"]
                        size_hint_y: None
                        height: dp(48)
                    HeaderLabel:
                        text: "Rounds"
                        size_hint_x: None
                        width: dp(140)
                    TextInput:
                        id: rounds_input
                        hint_text: "e.g. 3"
                        multiline: False
                        input_filter: "int"
                        on_text: self.text = self.text.lstrip()
                        on_text_validate: round_time.focus = True
                    HeaderLabel:
                        text: "Round time (min)"
                        size_hint_x: None
                        width: dp(140)
                    TextInput:
                        id: round_time
                        hint_text: "e.g. 30"
                        multiline: False
                        input_filter: "int"
                        on_text: self.text = self.text.lstrip()
                BoxLayout:
                    size_hint_y: None
                    height: dp(52)
                    spacing: dp(8)
                    PrimaryButton:
                        text: "Next: Add Players"
                        on_release:
                            root.next_to_players(event_name.text, event_type.text, rounds_input.text, round_time.text)
                    SecondaryButton:
                        text: "Cancel"
                        on_release: root.manager.current = "eventslist"

<CreateEventScreen>:
    BoxLayout:
        orientation: "vertical"
        padding: dp(10)
        spacing: dp(8)
        TitleLabel:
            text: "Add Players"
            size_hint_y: None
            height: dp(32)
        BoxLayout:
            size_hint_y: None
            height: dp(36)
            TextInput:
                id: filter_input
                hint_text: "Filter players..."
                multiline: False
                on_text: self.text = self.text.lstrip(); root.filter_players(self.text)
        BoxLayout:
            spacing: dp(8)
            BoxLayout:
                orientation: 'vertical'
                HeaderLabel:
                    text: "Selectable players"
                    size_hint_y: None
                    height: dp(24)
                ScrollView:
                    canvas.after:
                        Color:
                            rgba: 1, 1, 1, 1
                        Line:
                            rectangle: (self.x, self.y, self.width, self.height)
                            width: 1.2
                    GridLayout:
                        id: players_select
                        cols: 1
                        size_hint_y: None
                        height: self.minimum_height
                        spacing: dp(6)
                        row_default_height: dp(56)
            BoxLayout:
                orientation: 'vertical'
                HeaderLabel:
                    text: "Selected players"
                    size_hint_y: None
                    height: dp(24)
                ScrollView:
                    canvas.after:
                        Color:
                            rgba: 1, 1, 1, 1
                        Line:
                            rectangle: (self.x, self.y, self.width, self.height)
                            width: 1.2
                    GridLayout:
                        id: selected_list
                        cols: 1
                        size_hint_y: None
                        height: self.minimum_height
                        spacing: dp(2)
                        row_default_height: dp(56)
        BoxLayout:
            size_hint_y: None
            height: dp(48)
            PrimaryButton:
                text: "Next: Seating"
                on_release: root.start_event()
            SecondaryButton:
                text: "Back"
                on_release: root.manager.current = "createevent_details"

<EventsListScreen>:
    BoxLayout:
        orientation: "vertical"
        padding: dp(10)
        spacing: dp(8)
        BoxLayout:
            size_hint_y: None
            height: dp(40)
            TitleLabel:
                text: "Events"
            PrimaryButton:
                text: "Create Event"
                size_hint_x: None
                width: dp(140)
                height: dp(40)
                on_release: root.manager.current = "createevent_details"
        ScrollView:
            canvas.after:
                Color:
                    rgba: 1, 1, 1, 1
                Line:
                    rectangle: (self.x, self.y, self.width, self.height)
                    width: 1.2
            GridLayout:
                id: events_grid
                cols: 1
                size_hint_y: None
                height: self.minimum_height
                spacing: dp(2)
                row_default_height: dp(68)

<EventScreen>:
    BoxLayout:
        orientation: "vertical"
        padding: dp(10)
        spacing: dp(8)
        BoxLayout:
            orientation: 'vertical'
            size_hint_y: None
            height: dp(76)
            canvas.before:
                Color:
                    rgba: 1,1,1,1
                Rectangle:
                    pos: self.pos
                    size: self.size
            BoxLayout:
                size_hint_y: None
                height: dp(38)
                spacing: dp(6)
                ScrollView:
                    size_hint_y: None
                    height: dp(38)
                    do_scroll_x: True
                    do_scroll_y: False
                    bar_width: 0
                    effect_y: None
                    scroll_y: 1
                    TitleLabel:
                        id: event_title
                        text: root.event_title
                        color: 0.1, 0.1, 0.1, 1
                        size_hint_x: None
                        size_hint_y: None
                        height: dp(38)
                        text_size: None, None
                        on_texture_size: self.width = self.texture_size[0] + dp(8)
                PrimaryButton:
                    text: "Close Event"
                    size_hint_x: None
                    width: dp(120)
                    height: dp(38)
                    on_release: root.close_event()
            BoxLayout:
                size_hint_y: None
                height: dp(38)
                spacing: dp(8)
                BodyLabel:
                    id: round_label
                    text: "Round: " + str(root.current_round)
                    color: 0.1, 0.1, 0.1, 1
                Widget:
                HeaderLabel:
                    id: timer_label
                    text: root.timer_text
                    size_hint_x: None
                    width: dp(130)
                    color: 0.1, 0.1, 0.1, 1
        ScrollView:
            GridLayout:
                id: matches_grid
                cols: 1
                size_hint_y: None
                height: self.minimum_height
                spacing: dp(6)
                row_default_height: dp(48)
        BoxLayout:
            size_hint_y: None
            height: dp(56)
            SecondaryButton:
                text: "Previous Round"
                on_release: root.prev_round_view()
            PrimaryButton:
                id: next_btn
                text: "Next Round"
                on_release: root.next_round()
            SecondaryButton:
                text: "Back to Events"
                on_release: root.manager.current = "eventslist"

<MatchRow>:
    size_hint_y: None
    height: dp(48)
    spacing: dp(8)
    canvas.before:
        Color:
            rgba: (0.95,0.95,0.95,1) if self.bye else (1,1,1,1)
        Rectangle:
            pos: self.pos
            size: self.size
    Label:
        text: root.p1_name
        color: 0,0,0,1
    Button:
        id: p1btn
        text: str(root.score1)
        size_hint_x: None
        width: dp(60)
        on_release: root.cycle_score(1)
        color: 0,0,0,1
    Label:
        text: "-"
        size_hint_x: None
        width: dp(20)
        color: 0,0,0,1
    Button:
        id: p2btn
        text: str(root.score2)
        size_hint_x: None
        width: dp(60)
        on_release: root.cycle_score(2)
        color: 0,0,0,1
    Label:
        text: root.p2_name
        color: 0,0,0,1

<SeatingScreen>:
    BoxLayout:
        orientation: "vertical"
        padding: dp(10)
        spacing: dp(8)
        TitleLabel:
            text: "Table Seating"
            size_hint_y: None
            height: dp(32)
        ScrollView:
            id: seat_sv
            do_scroll_x: False
            canvas.after:
                Color:
                    rgba: 1, 1, 1, 1
                Line:
                    rectangle: (self.x, self.y, self.width, self.height)
                    width: 1.2
            GridLayout:
                id: seating_list
                cols: 1
                size_hint_y: None
                height: self.minimum_height
                spacing: dp(6)
                row_default_height: dp(32)
        BoxLayout:
            size_hint_y: None
            height: dp(48)
            Button:
                text: "Randomize again"
                on_release: root.randomize()
            Button:
                text: "Begin Round 1"
                on_release: root.confirm_and_begin()

<StandingsScreen>:
    BoxLayout:
        orientation: "vertical"
        padding: dp(10)
        spacing: dp(8)
        TitleLabel:
            id: standings_title
            text: "Standings"
            size_hint_y: None
            height: dp(32)
        ScrollView:
            id: std_sv
            do_scroll_x: False
            canvas.after:
                Color:
                    rgba: 1, 1, 1, 1
                Line:
                    rectangle: (self.x, self.y, self.width, self.height)
                    width: 1.2
            GridLayout:
                id: standings_grid
                cols: 7
                size_hint_y: None
                height: self.minimum_height
                spacing: dp(4)
                row_default_height: dp(42)
        BoxLayout:
            size_hint_y: None
            height: dp(48)
            Button:
                text: "Back to Last Round"
                on_release: root.back_to_last_round()
            Button:
                text: "Back to Events"
                on_release: root.manager.current = "eventslist"

<LeagueScreen>:
    BoxLayout:
        orientation: "vertical"
        padding: dp(10)
        spacing: dp(8)
        Label:
            text: "League Tracker (coming soon)"

<BingoScreen>:
    BoxLayout:
        orientation: "vertical"
        padding: dp(10)
        spacing: dp(8)
        Label:
            text: "Bingo (coming soon)"

<DraftTimerScreen>:
    BoxLayout:
        orientation: "vertical"
        padding: dp(10)
        spacing: dp(8)
        BoxLayout:
            id: timer_container
            orientation: "vertical"
        # Control bar with image icon buttons
        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: None
            height: dp(96)
            spacing: dp(16)
            padding: dp(12)
            # Play
            IconButton:
                source: 'assets/play.png'
                on_release: root.play_timer()
                canvas.before:
                    Color:
                        rgba: 0.26, 0.26, 0.26, 1
                    RoundedRectangle:
                        pos: self.pos
                        size: self.size
                        radius: [dp(16),]
            # Pause
            IconButton:
                source: 'assets/pause.png'
                on_release: root.pause_timer()
                canvas.before:
                    Color:
                        rgba: 0.26, 0.26, 0.26, 1
                    RoundedRectangle:
                        pos: self.pos
                        size: self.size
                        radius: [dp(16),]
            # Reset
            IconButton:
                source: 'assets/reset.png'
                on_release: root.reset_timer()
                canvas.before:
                    Color:
                        rgba: 0.26, 0.26, 0.26, 1
                    RoundedRectangle:
                        pos: self.pos
                        size: self.size
                        radius: [dp(16),]


<LifeTrackerScreen>:
    # Full-screen FloatLayout to allow overlaying center buttons
    FloatLayout:
        # Two vertical halves for life counters
        BoxLayout:
            orientation: 'vertical'
            size_hint: 1, 1
            # TOP half (rotated 180 degrees for opposite-facing user)
            RelativeLayout:
                # Big life label centered and rotated 180° (visual only)
                Label:
                    id: top_life_label
                    text: str(root.top_life)
                    font_size: self.height * 0.6
                    bold: True
                    color: 1,1,1,1
                    halign: 'center'
                    valign: 'middle'
                    text_size: self.size
                    canvas.before:
                        PushMatrix
                        Rotate:
                            angle: 180
                            origin: self.center
                    canvas.after:
                        PopMatrix
                # Left/Right invisible tap zones (top: left=decrement, right=increment)
                BoxLayout:
                    orientation: 'horizontal'
                    size_hint: 1, 1
                    Button:
                        background_normal: ''
                        background_color: 0,0,0,0
                        on_release: root.inc_top()
                    Button:
                        background_normal: ''
                        background_color: 0,0,0,0
                        on_release: root.dec_top()
            # BOTTOM half (normal orientation)
            RelativeLayout:
                # Big life label centered
                Label:
                    id: bottom_life_label
                    text: str(root.bottom_life)
                    font_size: self.height * 0.6
                    bold: True
                    color: 1,1,1,1
                    halign: 'center'
                    valign: 'middle'
                    text_size: self.size
                # Left/Right invisible tap zones (bottom inverted: left=increment, right=decrement)
                BoxLayout:
                    orientation: 'horizontal'
                    size_hint: 1, 1
                    Button:
                        background_normal: ''
                        background_color: 0,0,0,0
                        on_release: root.dec_bottom()
                    Button:
                        background_normal: ''
                        background_color: 0,0,0,0
                        on_release: root.inc_bottom()
        # Center overlay buttons at 1/3 and 2/3 of width
        # Reset Button (circular)
        Button:
            id: reset_btn
            text: '\u27F3' if hasattr(app, 'theme') else 'Reset'
            font_size: '22sp'
            size_hint: None, None
            size: dp(60), dp(60)
            pos_hint: {'center_x': 0.3333, 'center_y': 0.5}
            background_normal: ''
            background_color: 0,0,0,0
            on_release: root.reset_counters()
            canvas.before:
                Color:
                    rgba: app.theme['primary'] if hasattr(app,'theme') else (0.16,0.47,0.96,1)
                Ellipse:
                    pos: self.x, self.y
                    size: self.width, self.height
            color: app.theme['on_primary'] if hasattr(app,'theme') else (1,1,1,1)
        # Settings Button (circular)
        Button:
            id: settings_btn
            text: '\u2699' if hasattr(app, 'theme') else 'Settings'
            font_size: '22sp'
            size_hint: None, None
            size: dp(60), dp(60)
            pos_hint: {'center_x': 0.6666, 'center_y': 0.5}
            background_normal: ''
            background_color: 0,0,0,0
            on_release: root.open_settings_popup()
            canvas.before:
                Color:
                    rgba: app.theme['surface'] if hasattr(app,'theme') else (0.95,0.95,0.95,1)
                Ellipse:
                    pos: self.x, self.y
                    size: self.width, self.height
            color: app.theme['on_surface'] if hasattr(app,'theme') else (0.1,0.1,0.1,1)


# Toast component
<Toast@BoxLayout>:
    text: ''
    size_hint: None, None
    size: self.minimum_size
    opacity: 0
    padding: [dp(14), dp(10)]
    spacing: dp(6)
    pos_hint: {'center_x': 0.5}
    canvas.before:
        Color:
            rgba: (0,0,0,0.9) if not hasattr(app, 'theme') else (app.theme['on_surface'][0], app.theme['on_surface'][1], app.theme['on_surface'][2], 0.9)
        RoundedRectangle:
            pos: self.x, self.y, self.width, self.height
            size: self.size
            radius: [dp(12),]
    Label:
        id: toast_label
        text: root.text
        color: (1,1,1,1)
        font_size: '14sp'
        size_hint: None, None
        size: self.texture_size


# Scoped style: draw visible separators at the LEFT edge of each BottomNav button
<BottomNav Button>:
    # Force flat background and compute color per active tab
    background_normal: ''
    background_down: ''
    # Active tab? compare center group button text with ScreenManager current
    background_color: ((app.theme['primary']) if (hasattr(app, 'root') and app.root and app.root.ids and 'sm' in app.root.ids and ((self.text=='Players' and app.root.ids.sm.current=='players') or (self.text=='Events' and app.root.ids.sm.current=='eventslist') or (self.text=='League Tracker' and app.root.ids.sm.current=='league') or (self.text=='Bingo' and app.root.ids.sm.current=='bingo') or (self.text=='Draft Timer' and app.root.ids.sm.current=='drafttimer') or (self.text=='Life Tracker' and app.root.ids.sm.current=='lifetracker'))) else (0.23, 0.23, 0.25, 1)) if hasattr(app, 'theme') else ((0.16,0.47,0.96,1) if (hasattr(app, 'root') and app.root and app.root.ids and 'sm' in app.root.ids and ((self.text=='Players' and app.root.ids.sm.current=='players') or (self.text=='Events' and app.root.ids.sm.current=='eventslist') or (self.text=='League Tracker' and app.root.ids.sm.current=='league') or (self.text=='Bingo' and app.root.ids.sm.current=='bingo') or (self.text=='Draft Timer' and app.root.ids.sm.current=='drafttimer') or (self.text=='Life Tracker' and app.root.ids.sm.current=='lifetracker'))) else (0.23,0.23,0.25,1))
    color: 1, 1, 1, 1
    on_kv_post: self.color = (1,1,1,1)
    # High-contrast left divider
    canvas.after:
        Color:
            rgba: (app.theme['on_surface'][0], app.theme['on_surface'][1], app.theme['on_surface'][2], 0.95) if hasattr(app, 'theme') else (0,0,0,0.95)
        Rectangle:
            # vertical divider along the left edge of the button (slight inset top/bottom)
            pos: self.x, self.y + dp(6)
            size: dp(2), self.height - dp(12)
